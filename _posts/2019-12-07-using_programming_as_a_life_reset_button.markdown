---
layout: post
title:      "Using Programming as a Life Reset Button"
date:       2019-12-07 21:23:44 +0000
permalink:  using_programming_as_a_life_reset_button
---


After finishing college with a Bachelors in Psychology, I quickly realized that the opportunities with that were few and far between. I felt like I had wasted four of my college years on that degree, and I had some regret for deciding on Psychology. I needed a direction, and after hours of brainstorming I remembered a C++ class I had taken in college as an elective and how much I enjoyed that class and how rewarding programming can feel. I had never heard of a coding bootcamp until I saw an advertisement for Flatiron and did some quick research and I couldnt help thinking, "That's too good to be true." In only five or ten months I could completely change my life by learning a fun and demanding skill, and then take that into the job market? I had found my direction.

At the current time now, I am two months in to the Part-Time Software Engineering program working on my first of five projects to help develop my skills as a programmer, and I feel I have already learned a years worth of information in two months. During the preparations for the bootcamp, I got my feet wet with Javascript and eventually got comfortable with the idea of coding through test-driven development. The best way to learn to code is to make mistakes, learn from the errors, and quickly you will find yourself making that mistake less and less often. This was a challenge for me at first because I felt that any error message was an indication that I wasn't grasping a concept, but I learned to welcome errors as a method for me to improve as a programmer by learning from them.

These first two months in the program I have learned a great deal about Procedural Ruby and Object Oriented Ruby. Procedural Ruby includes data structures like arrays and hashes and methods to control the flow of a program using loops, conditionals and iteration. With my C++ experience from my college course, the concepts of variables, conditionals, loops and arrays all were fairly easy to grasp and learn the format of using them in Ruby. My first real challenge was with iterators and deciding which one to use depending on the situation. Iterators pass each element of a collection to a block, and run that block's code logic on that element. The most common iterator to use is Each as it is what I like to think of as the base iterator, and iterators like Collect and Select are versions of Each geared to handle specific goals and return values. I learned to think about what I needed from the collection to decide on an iterator, asking myself questions like, "Do I need to collect a set of these elements? Find a specific element meeting a particular condition? Apply basic logic to each element of this collection?" This method of self talk has greatly improved my decision-making as a programmer, and I feel it is crucial to take the time to pick your brain with these questions until you stumble on the answer you are confident with, instead of just jumping into a decision without much thought.

Object Oriented Ruby definitely has its share of challenges as well, including the value of self in differing scopes and the relationships between Class objects. It was a challenge for me to learn how to access classes through the scope of a different class, and deciding whether something should be in the scope of an instance or the class. The concept of self has taught me to always keep track of the receiver of each method call I make depending on the scope, and help me make decisions on whether a method should be an instance method or a class method, depending on the receiver I expect this method to be called on. I also had to come to terms with the idea that class objects all can relate to each other in different ways, an example being an Artist class that has many instances of a Song class, and each instance of that song class having a specific artist. Object Oriented Ruby has allowed me to see programming as a way to interact with reality, and give me the means to be creative with code to solve a great deal of problems I will be faced with in the future.
